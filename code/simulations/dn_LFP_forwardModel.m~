function [voltage, dn] =  dn_LFP_forwardModel(dnParams, t, stim)

% INPUTS --------------------------------------------------------------
% dnParams: DN model parameters
% dnStim  : stimulus input to the DN model
% t       : time 

% OUTPUTS -------------------------------------------------------------

%% EXAMPLES 

dnParams = [0.1, 0, 0.1, 2, 0.1, 0, 1];
t        = 0.001 : 0.001 : 1.2;
stim     = zeros(1, length(t));
stim(t>=0.2 & t<0.7) = 1;

figureOn = 1;

%% PRED-DEFINED PARAMETERS AND FUNCTIONS

tau         = 0.1; % time scale parameter for the leaky integrator
srate       = 1000;
restingRate = 0.1;
nTrials     = 100;
nSynapses   = 1000;

normMax     = @(x) x./max(x);
synapseFunc = @(x) zeromean(2*rand(x,1)-1); % uniformly distributed random variable centered around 0

% DERIVED PARAMETERS ----------------------------
t_lth   = length(t);

%% GENERATE DN MODEL PREDICTION AND SPIKE RATES

dn     = normMax(normMax(dn_DNmodel(dnParams, stim, t)) + restingRate);
weight = synapseFunc(nSynapses);

for k = 1 %: nTrials
    tmp = rand(size(dn)); spikes = zeros(size(tmp));
    spikes(tmp < dn) = 1;
    
    % multiply each spike by the peak current of the appropriate synapse
    peakCurrent = synapseFunc(nSynapses);
    spikes      = bsxfun(@times, spikes, peakCurrent);
    % sum over synapses
    totalSpikes(:, k) = sum(spikes);
end



% generate multiple noisy time series
spike_ts = poissrnd(repmat(dn, [nTrials, 1]))';
weight  = (rand(nTrials, 1) - 0.5).*2;

for k = 1 : nTrials
   spike_ts(:, k) =  spike_ts(:, k) * weight(k);
end



%% LEAKY INTEGRATION

voltage       = zeros(size(spike_ts));
voltage(1, :) = spike_ts(1, :);

for k = 1 : length(t) - 1
    dy = (spike_ts(k, :) - voltage(k, :))/tau;
    voltage(k+1, :) = voltage(k, :) + dy;
end

%% VISUALIZE

if figureOn == 1
    figure (100), clf
    plot(t, voltage(:, 1)), hold on
    plot(t, mean(voltage, 2))
    plot(t, dn, 'k:')
end

end